/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CalciteServer_TYPES_H
#define CalciteServer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class InvalidParseRequest;

class TPlanResult;

typedef struct _InvalidParseRequest__isset {
  _InvalidParseRequest__isset() : whatUp(false), whyUp(false) {}
  bool whatUp :1;
  bool whyUp :1;
} _InvalidParseRequest__isset;

class InvalidParseRequest : public ::apache::thrift::TException {
 public:

  InvalidParseRequest(const InvalidParseRequest&);
  InvalidParseRequest& operator=(const InvalidParseRequest&);
  InvalidParseRequest() : whatUp(0), whyUp() {
  }

  virtual ~InvalidParseRequest() throw();
  int32_t whatUp;
  std::string whyUp;

  _InvalidParseRequest__isset __isset;

  void __set_whatUp(const int32_t val);

  void __set_whyUp(const std::string& val);

  bool operator == (const InvalidParseRequest & rhs) const
  {
    if (!(whatUp == rhs.whatUp))
      return false;
    if (!(whyUp == rhs.whyUp))
      return false;
    return true;
  }
  bool operator != (const InvalidParseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidParseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidParseRequest &a, InvalidParseRequest &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidParseRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TPlanResult__isset {
  _TPlanResult__isset() : plan_result(false), execution_time_ms(false) {}
  bool plan_result :1;
  bool execution_time_ms :1;
} _TPlanResult__isset;

class TPlanResult : public virtual ::apache::thrift::TBase {
 public:

  TPlanResult(const TPlanResult&);
  TPlanResult& operator=(const TPlanResult&);
  TPlanResult() : plan_result(), execution_time_ms(0) {
  }

  virtual ~TPlanResult() throw();
  std::string plan_result;
  int64_t execution_time_ms;

  _TPlanResult__isset __isset;

  void __set_plan_result(const std::string& val);

  void __set_execution_time_ms(const int64_t val);

  bool operator == (const TPlanResult & rhs) const
  {
    if (!(plan_result == rhs.plan_result))
      return false;
    if (!(execution_time_ms == rhs.execution_time_ms))
      return false;
    return true;
  }
  bool operator != (const TPlanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPlanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPlanResult &a, TPlanResult &b);

inline std::ostream& operator<<(std::ostream& out, const TPlanResult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
