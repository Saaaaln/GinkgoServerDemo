/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CalciteServer_H
#define CalciteServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "CalciteServer_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalciteServerIf {
 public:
  virtual ~CalciteServerIf() {}
  virtual void ping() = 0;
  virtual void shutdown() = 0;
  virtual void sql2Plan(TPlanResult& _return, const std::string& user, const std::string& passwd, const std::string& catalog, const std::string& sql_text, const bool legacySyntax, const bool isexplain) = 0;
  virtual void updateMetadata(const std::string& catalog, const std::string& table) = 0;
};

class CalciteServerIfFactory {
 public:
  typedef CalciteServerIf Handler;

  virtual ~CalciteServerIfFactory() {}

  virtual CalciteServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalciteServerIf* /* handler */) = 0;
};

class CalciteServerIfSingletonFactory : virtual public CalciteServerIfFactory {
 public:
  CalciteServerIfSingletonFactory(const boost::shared_ptr<CalciteServerIf>& iface) : iface_(iface) {}
  virtual ~CalciteServerIfSingletonFactory() {}

  virtual CalciteServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalciteServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalciteServerIf> iface_;
};

class CalciteServerNull : virtual public CalciteServerIf {
 public:
  virtual ~CalciteServerNull() {}
  void ping() {
    return;
  }
  void shutdown() {
    return;
  }
  void sql2Plan(TPlanResult& /* _return */, const std::string& /* user */, const std::string& /* passwd */, const std::string& /* catalog */, const std::string& /* sql_text */, const bool /* legacySyntax */, const bool /* isexplain */) {
    return;
  }
  void updateMetadata(const std::string& /* catalog */, const std::string& /* table */) {
    return;
  }
};


class CalciteServer_ping_args {
 public:

  CalciteServer_ping_args(const CalciteServer_ping_args&);
  CalciteServer_ping_args& operator=(const CalciteServer_ping_args&);
  CalciteServer_ping_args() {
  }

  virtual ~CalciteServer_ping_args() throw();

  bool operator == (const CalciteServer_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CalciteServer_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_ping_pargs {
 public:


  virtual ~CalciteServer_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_ping_result {
 public:

  CalciteServer_ping_result(const CalciteServer_ping_result&);
  CalciteServer_ping_result& operator=(const CalciteServer_ping_result&);
  CalciteServer_ping_result() {
  }

  virtual ~CalciteServer_ping_result() throw();

  bool operator == (const CalciteServer_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CalciteServer_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_ping_presult {
 public:


  virtual ~CalciteServer_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CalciteServer_shutdown_args {
 public:

  CalciteServer_shutdown_args(const CalciteServer_shutdown_args&);
  CalciteServer_shutdown_args& operator=(const CalciteServer_shutdown_args&);
  CalciteServer_shutdown_args() {
  }

  virtual ~CalciteServer_shutdown_args() throw();

  bool operator == (const CalciteServer_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CalciteServer_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_shutdown_pargs {
 public:


  virtual ~CalciteServer_shutdown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_shutdown_result {
 public:

  CalciteServer_shutdown_result(const CalciteServer_shutdown_result&);
  CalciteServer_shutdown_result& operator=(const CalciteServer_shutdown_result&);
  CalciteServer_shutdown_result() {
  }

  virtual ~CalciteServer_shutdown_result() throw();

  bool operator == (const CalciteServer_shutdown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CalciteServer_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_shutdown_presult {
 public:


  virtual ~CalciteServer_shutdown_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CalciteServer_sql2Plan_args__isset {
  _CalciteServer_sql2Plan_args__isset() : user(false), passwd(false), catalog(false), sql_text(false), legacySyntax(false), isexplain(false) {}
  bool user :1;
  bool passwd :1;
  bool catalog :1;
  bool sql_text :1;
  bool legacySyntax :1;
  bool isexplain :1;
} _CalciteServer_sql2Plan_args__isset;

class CalciteServer_sql2Plan_args {
 public:

  CalciteServer_sql2Plan_args(const CalciteServer_sql2Plan_args&);
  CalciteServer_sql2Plan_args& operator=(const CalciteServer_sql2Plan_args&);
  CalciteServer_sql2Plan_args() : user(), passwd(), catalog(), sql_text(), legacySyntax(0), isexplain(0) {
  }

  virtual ~CalciteServer_sql2Plan_args() throw();
  std::string user;
  std::string passwd;
  std::string catalog;
  std::string sql_text;
  bool legacySyntax;
  bool isexplain;

  _CalciteServer_sql2Plan_args__isset __isset;

  void __set_user(const std::string& val);

  void __set_passwd(const std::string& val);

  void __set_catalog(const std::string& val);

  void __set_sql_text(const std::string& val);

  void __set_legacySyntax(const bool val);

  void __set_isexplain(const bool val);

  bool operator == (const CalciteServer_sql2Plan_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    if (!(catalog == rhs.catalog))
      return false;
    if (!(sql_text == rhs.sql_text))
      return false;
    if (!(legacySyntax == rhs.legacySyntax))
      return false;
    if (!(isexplain == rhs.isexplain))
      return false;
    return true;
  }
  bool operator != (const CalciteServer_sql2Plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_sql2Plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_sql2Plan_pargs {
 public:


  virtual ~CalciteServer_sql2Plan_pargs() throw();
  const std::string* user;
  const std::string* passwd;
  const std::string* catalog;
  const std::string* sql_text;
  const bool* legacySyntax;
  const bool* isexplain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CalciteServer_sql2Plan_result__isset {
  _CalciteServer_sql2Plan_result__isset() : success(false), parseErr(false) {}
  bool success :1;
  bool parseErr :1;
} _CalciteServer_sql2Plan_result__isset;

class CalciteServer_sql2Plan_result {
 public:

  CalciteServer_sql2Plan_result(const CalciteServer_sql2Plan_result&);
  CalciteServer_sql2Plan_result& operator=(const CalciteServer_sql2Plan_result&);
  CalciteServer_sql2Plan_result() {
  }

  virtual ~CalciteServer_sql2Plan_result() throw();
  TPlanResult success;
  InvalidParseRequest parseErr;

  _CalciteServer_sql2Plan_result__isset __isset;

  void __set_success(const TPlanResult& val);

  void __set_parseErr(const InvalidParseRequest& val);

  bool operator == (const CalciteServer_sql2Plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(parseErr == rhs.parseErr))
      return false;
    return true;
  }
  bool operator != (const CalciteServer_sql2Plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_sql2Plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CalciteServer_sql2Plan_presult__isset {
  _CalciteServer_sql2Plan_presult__isset() : success(false), parseErr(false) {}
  bool success :1;
  bool parseErr :1;
} _CalciteServer_sql2Plan_presult__isset;

class CalciteServer_sql2Plan_presult {
 public:


  virtual ~CalciteServer_sql2Plan_presult() throw();
  TPlanResult* success;
  InvalidParseRequest parseErr;

  _CalciteServer_sql2Plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CalciteServer_updateMetadata_args__isset {
  _CalciteServer_updateMetadata_args__isset() : catalog(false), table(false) {}
  bool catalog :1;
  bool table :1;
} _CalciteServer_updateMetadata_args__isset;

class CalciteServer_updateMetadata_args {
 public:

  CalciteServer_updateMetadata_args(const CalciteServer_updateMetadata_args&);
  CalciteServer_updateMetadata_args& operator=(const CalciteServer_updateMetadata_args&);
  CalciteServer_updateMetadata_args() : catalog(), table() {
  }

  virtual ~CalciteServer_updateMetadata_args() throw();
  std::string catalog;
  std::string table;

  _CalciteServer_updateMetadata_args__isset __isset;

  void __set_catalog(const std::string& val);

  void __set_table(const std::string& val);

  bool operator == (const CalciteServer_updateMetadata_args & rhs) const
  {
    if (!(catalog == rhs.catalog))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const CalciteServer_updateMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_updateMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_updateMetadata_pargs {
 public:


  virtual ~CalciteServer_updateMetadata_pargs() throw();
  const std::string* catalog;
  const std::string* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_updateMetadata_result {
 public:

  CalciteServer_updateMetadata_result(const CalciteServer_updateMetadata_result&);
  CalciteServer_updateMetadata_result& operator=(const CalciteServer_updateMetadata_result&);
  CalciteServer_updateMetadata_result() {
  }

  virtual ~CalciteServer_updateMetadata_result() throw();

  bool operator == (const CalciteServer_updateMetadata_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CalciteServer_updateMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalciteServer_updateMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalciteServer_updateMetadata_presult {
 public:


  virtual ~CalciteServer_updateMetadata_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalciteServerClient : virtual public CalciteServerIf {
 public:
  CalciteServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalciteServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void shutdown();
  void send_shutdown();
  void recv_shutdown();
  void sql2Plan(TPlanResult& _return, const std::string& user, const std::string& passwd, const std::string& catalog, const std::string& sql_text, const bool legacySyntax, const bool isexplain);
  void send_sql2Plan(const std::string& user, const std::string& passwd, const std::string& catalog, const std::string& sql_text, const bool legacySyntax, const bool isexplain);
  void recv_sql2Plan(TPlanResult& _return);
  void updateMetadata(const std::string& catalog, const std::string& table);
  void send_updateMetadata(const std::string& catalog, const std::string& table);
  void recv_updateMetadata();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalciteServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalciteServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalciteServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql2Plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalciteServerProcessor(boost::shared_ptr<CalciteServerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &CalciteServerProcessor::process_ping;
    processMap_["shutdown"] = &CalciteServerProcessor::process_shutdown;
    processMap_["sql2Plan"] = &CalciteServerProcessor::process_sql2Plan;
    processMap_["updateMetadata"] = &CalciteServerProcessor::process_updateMetadata;
  }

  virtual ~CalciteServerProcessor() {}
};

class CalciteServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalciteServerProcessorFactory(const ::boost::shared_ptr< CalciteServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalciteServerIfFactory > handlerFactory_;
};

class CalciteServerMultiface : virtual public CalciteServerIf {
 public:
  CalciteServerMultiface(std::vector<boost::shared_ptr<CalciteServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalciteServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalciteServerIf> > ifaces_;
  CalciteServerMultiface() {}
  void add(boost::shared_ptr<CalciteServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

  void sql2Plan(TPlanResult& _return, const std::string& user, const std::string& passwd, const std::string& catalog, const std::string& sql_text, const bool legacySyntax, const bool isexplain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql2Plan(_return, user, passwd, catalog, sql_text, legacySyntax, isexplain);
    }
    ifaces_[i]->sql2Plan(_return, user, passwd, catalog, sql_text, legacySyntax, isexplain);
    return;
  }

  void updateMetadata(const std::string& catalog, const std::string& table) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateMetadata(catalog, table);
    }
    ifaces_[i]->updateMetadata(catalog, table);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalciteServerConcurrentClient : virtual public CalciteServerIf {
 public:
  CalciteServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalciteServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void shutdown();
  int32_t send_shutdown();
  void recv_shutdown(const int32_t seqid);
  void sql2Plan(TPlanResult& _return, const std::string& user, const std::string& passwd, const std::string& catalog, const std::string& sql_text, const bool legacySyntax, const bool isexplain);
  int32_t send_sql2Plan(const std::string& user, const std::string& passwd, const std::string& catalog, const std::string& sql_text, const bool legacySyntax, const bool isexplain);
  void recv_sql2Plan(TPlanResult& _return, const int32_t seqid);
  void updateMetadata(const std::string& catalog, const std::string& table);
  int32_t send_updateMetadata(const std::string& catalog, const std::string& table);
  void recv_updateMetadata(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
