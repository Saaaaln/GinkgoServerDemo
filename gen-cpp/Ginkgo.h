/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Ginkgo_H
#define Ginkgo_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "table_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GinkgoIf {
 public:
  virtual ~GinkgoIf() {}
  virtual void get_tables_meta(std::vector<TTableDescriptor> & _return) = 0;
  virtual void get_table_descriptor(TTableDescriptor& _return, const std::string& table_name) = 0;
};

class GinkgoIfFactory {
 public:
  typedef GinkgoIf Handler;

  virtual ~GinkgoIfFactory() {}

  virtual GinkgoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GinkgoIf* /* handler */) = 0;
};

class GinkgoIfSingletonFactory : virtual public GinkgoIfFactory {
 public:
  GinkgoIfSingletonFactory(const boost::shared_ptr<GinkgoIf>& iface) : iface_(iface) {}
  virtual ~GinkgoIfSingletonFactory() {}

  virtual GinkgoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GinkgoIf* /* handler */) {}

 protected:
  boost::shared_ptr<GinkgoIf> iface_;
};

class GinkgoNull : virtual public GinkgoIf {
 public:
  virtual ~GinkgoNull() {}
  void get_tables_meta(std::vector<TTableDescriptor> & /* _return */) {
    return;
  }
  void get_table_descriptor(TTableDescriptor& /* _return */, const std::string& /* table_name */) {
    return;
  }
};


class Ginkgo_get_tables_meta_args {
 public:

  Ginkgo_get_tables_meta_args(const Ginkgo_get_tables_meta_args&);
  Ginkgo_get_tables_meta_args& operator=(const Ginkgo_get_tables_meta_args&);
  Ginkgo_get_tables_meta_args() {
  }

  virtual ~Ginkgo_get_tables_meta_args() throw();

  bool operator == (const Ginkgo_get_tables_meta_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Ginkgo_get_tables_meta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ginkgo_get_tables_meta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Ginkgo_get_tables_meta_pargs {
 public:


  virtual ~Ginkgo_get_tables_meta_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Ginkgo_get_tables_meta_result__isset {
  _Ginkgo_get_tables_meta_result__isset() : success(false) {}
  bool success :1;
} _Ginkgo_get_tables_meta_result__isset;

class Ginkgo_get_tables_meta_result {
 public:

  Ginkgo_get_tables_meta_result(const Ginkgo_get_tables_meta_result&);
  Ginkgo_get_tables_meta_result& operator=(const Ginkgo_get_tables_meta_result&);
  Ginkgo_get_tables_meta_result() {
  }

  virtual ~Ginkgo_get_tables_meta_result() throw();
  std::vector<TTableDescriptor>  success;

  _Ginkgo_get_tables_meta_result__isset __isset;

  void __set_success(const std::vector<TTableDescriptor> & val);

  bool operator == (const Ginkgo_get_tables_meta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Ginkgo_get_tables_meta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ginkgo_get_tables_meta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Ginkgo_get_tables_meta_presult__isset {
  _Ginkgo_get_tables_meta_presult__isset() : success(false) {}
  bool success :1;
} _Ginkgo_get_tables_meta_presult__isset;

class Ginkgo_get_tables_meta_presult {
 public:


  virtual ~Ginkgo_get_tables_meta_presult() throw();
  std::vector<TTableDescriptor> * success;

  _Ginkgo_get_tables_meta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Ginkgo_get_table_descriptor_args__isset {
  _Ginkgo_get_table_descriptor_args__isset() : table_name(false) {}
  bool table_name :1;
} _Ginkgo_get_table_descriptor_args__isset;

class Ginkgo_get_table_descriptor_args {
 public:

  Ginkgo_get_table_descriptor_args(const Ginkgo_get_table_descriptor_args&);
  Ginkgo_get_table_descriptor_args& operator=(const Ginkgo_get_table_descriptor_args&);
  Ginkgo_get_table_descriptor_args() : table_name() {
  }

  virtual ~Ginkgo_get_table_descriptor_args() throw();
  std::string table_name;

  _Ginkgo_get_table_descriptor_args__isset __isset;

  void __set_table_name(const std::string& val);

  bool operator == (const Ginkgo_get_table_descriptor_args & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const Ginkgo_get_table_descriptor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ginkgo_get_table_descriptor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Ginkgo_get_table_descriptor_pargs {
 public:


  virtual ~Ginkgo_get_table_descriptor_pargs() throw();
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Ginkgo_get_table_descriptor_result__isset {
  _Ginkgo_get_table_descriptor_result__isset() : success(false) {}
  bool success :1;
} _Ginkgo_get_table_descriptor_result__isset;

class Ginkgo_get_table_descriptor_result {
 public:

  Ginkgo_get_table_descriptor_result(const Ginkgo_get_table_descriptor_result&);
  Ginkgo_get_table_descriptor_result& operator=(const Ginkgo_get_table_descriptor_result&);
  Ginkgo_get_table_descriptor_result() {
  }

  virtual ~Ginkgo_get_table_descriptor_result() throw();
  TTableDescriptor success;

  _Ginkgo_get_table_descriptor_result__isset __isset;

  void __set_success(const TTableDescriptor& val);

  bool operator == (const Ginkgo_get_table_descriptor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Ginkgo_get_table_descriptor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ginkgo_get_table_descriptor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Ginkgo_get_table_descriptor_presult__isset {
  _Ginkgo_get_table_descriptor_presult__isset() : success(false) {}
  bool success :1;
} _Ginkgo_get_table_descriptor_presult__isset;

class Ginkgo_get_table_descriptor_presult {
 public:


  virtual ~Ginkgo_get_table_descriptor_presult() throw();
  TTableDescriptor* success;

  _Ginkgo_get_table_descriptor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GinkgoClient : virtual public GinkgoIf {
 public:
  GinkgoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GinkgoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_tables_meta(std::vector<TTableDescriptor> & _return);
  void send_get_tables_meta();
  void recv_get_tables_meta(std::vector<TTableDescriptor> & _return);
  void get_table_descriptor(TTableDescriptor& _return, const std::string& table_name);
  void send_get_table_descriptor(const std::string& table_name);
  void recv_get_table_descriptor(TTableDescriptor& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GinkgoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GinkgoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GinkgoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_tables_meta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_descriptor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GinkgoProcessor(boost::shared_ptr<GinkgoIf> iface) :
    iface_(iface) {
    processMap_["get_tables_meta"] = &GinkgoProcessor::process_get_tables_meta;
    processMap_["get_table_descriptor"] = &GinkgoProcessor::process_get_table_descriptor;
  }

  virtual ~GinkgoProcessor() {}
};

class GinkgoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GinkgoProcessorFactory(const ::boost::shared_ptr< GinkgoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GinkgoIfFactory > handlerFactory_;
};

class GinkgoMultiface : virtual public GinkgoIf {
 public:
  GinkgoMultiface(std::vector<boost::shared_ptr<GinkgoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GinkgoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GinkgoIf> > ifaces_;
  GinkgoMultiface() {}
  void add(boost::shared_ptr<GinkgoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_tables_meta(std::vector<TTableDescriptor> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tables_meta(_return);
    }
    ifaces_[i]->get_tables_meta(_return);
    return;
  }

  void get_table_descriptor(TTableDescriptor& _return, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_descriptor(_return, table_name);
    }
    ifaces_[i]->get_table_descriptor(_return, table_name);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GinkgoConcurrentClient : virtual public GinkgoIf {
 public:
  GinkgoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GinkgoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_tables_meta(std::vector<TTableDescriptor> & _return);
  int32_t send_get_tables_meta();
  void recv_get_tables_meta(std::vector<TTableDescriptor> & _return, const int32_t seqid);
  void get_table_descriptor(TTableDescriptor& _return, const std::string& table_name);
  int32_t send_get_table_descriptor(const std::string& table_name);
  void recv_get_table_descriptor(TTableDescriptor& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
