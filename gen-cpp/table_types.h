/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef table_TYPES_H
#define table_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct column_type {
  enum type {
    INT = 0,
    FLOAT = 1,
    DOUBLE = 2,
    STRING = 3
  };
};

extern const std::map<int, const char*> _column_type_VALUES_TO_NAMES;

class Attribute;

class TTableDescriptor;

typedef struct _Attribute__isset {
  _Attribute__isset() : attrName(false), attrType(false) {}
  bool attrName :1;
  bool attrType :1;
} _Attribute__isset;

class Attribute : public virtual ::apache::thrift::TBase {
 public:

  Attribute(const Attribute&);
  Attribute& operator=(const Attribute&);
  Attribute() : attrName(), attrType((column_type::type)0) {
  }

  virtual ~Attribute() throw();
  std::string attrName;
  column_type::type attrType;

  _Attribute__isset __isset;

  void __set_attrName(const std::string& val);

  void __set_attrType(const column_type::type val);

  bool operator == (const Attribute & rhs) const
  {
    if (!(attrName == rhs.attrName))
      return false;
    if (!(attrType == rhs.attrType))
      return false;
    return true;
  }
  bool operator != (const Attribute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Attribute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Attribute &a, Attribute &b);

inline std::ostream& operator<<(std::ostream& out, const Attribute& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TTableDescriptor__isset {
  _TTableDescriptor__isset() : tableName(false), attributes(false) {}
  bool tableName :1;
  bool attributes :1;
} _TTableDescriptor__isset;

class TTableDescriptor : public virtual ::apache::thrift::TBase {
 public:

  TTableDescriptor(const TTableDescriptor&);
  TTableDescriptor& operator=(const TTableDescriptor&);
  TTableDescriptor() : tableName() {
  }

  virtual ~TTableDescriptor() throw();
  std::string tableName;
  std::vector<Attribute>  attributes;

  _TTableDescriptor__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_attributes(const std::vector<Attribute> & val);

  bool operator == (const TTableDescriptor & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const TTableDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTableDescriptor &a, TTableDescriptor &b);

inline std::ostream& operator<<(std::ostream& out, const TTableDescriptor& obj)
{
  obj.printTo(out);
  return out;
}



#endif
