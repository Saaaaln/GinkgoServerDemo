/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "table_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kcolumn_typeValues[] = {
  column_type::INT,
  column_type::FLOAT,
  column_type::DOUBLE,
  column_type::STRING
};
const char* _kcolumn_typeNames[] = {
  "INT",
  "FLOAT",
  "DOUBLE",
  "STRING"
};
const std::map<int, const char*> _column_type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kcolumn_typeValues, _kcolumn_typeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Attribute::~Attribute() throw() {
}


void Attribute::__set_attrName(const std::string& val) {
  this->attrName = val;
}

void Attribute::__set_attrType(const column_type::type val) {
  this->attrType = val;
}

uint32_t Attribute::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attrName);
          this->__isset.attrName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->attrType = (column_type::type)ecast0;
          this->__isset.attrType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Attribute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Attribute");

  xfer += oprot->writeFieldBegin("attrName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->attrName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->attrType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Attribute &a, Attribute &b) {
  using ::std::swap;
  swap(a.attrName, b.attrName);
  swap(a.attrType, b.attrType);
  swap(a.__isset, b.__isset);
}

Attribute::Attribute(const Attribute& other1) {
  attrName = other1.attrName;
  attrType = other1.attrType;
  __isset = other1.__isset;
}
Attribute& Attribute::operator=(const Attribute& other2) {
  attrName = other2.attrName;
  attrType = other2.attrType;
  __isset = other2.__isset;
  return *this;
}
void Attribute::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Attribute(";
  out << "attrName=" << to_string(attrName);
  out << ", " << "attrType=" << to_string(attrType);
  out << ")";
}


TTableDescriptor::~TTableDescriptor() throw() {
}


void TTableDescriptor::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TTableDescriptor::__set_attributes(const std::vector<Attribute> & val) {
  this->attributes = val;
}

uint32_t TTableDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->attributes.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->attributes[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TTableDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TTableDescriptor");

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
    std::vector<Attribute> ::const_iterator _iter8;
    for (_iter8 = this->attributes.begin(); _iter8 != this->attributes.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TTableDescriptor &a, TTableDescriptor &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.attributes, b.attributes);
  swap(a.__isset, b.__isset);
}

TTableDescriptor::TTableDescriptor(const TTableDescriptor& other9) {
  tableName = other9.tableName;
  attributes = other9.attributes;
  __isset = other9.__isset;
}
TTableDescriptor& TTableDescriptor::operator=(const TTableDescriptor& other10) {
  tableName = other10.tableName;
  attributes = other10.attributes;
  __isset = other10.__isset;
  return *this;
}
void TTableDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTableDescriptor(";
  out << "tableName=" << to_string(tableName);
  out << ", " << "attributes=" << to_string(attributes);
  out << ")";
}


